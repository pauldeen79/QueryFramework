// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 6.0.2
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ExpressionFramework.Core.DomainModel.Builders
{
#nullable enable
    public partial class ConditionBuilder : ExpressionFramework.Abstractions.DomainModel.Builders.IConditionBuilder
    {
        public ExpressionFramework.Abstractions.DomainModel.Builders.IExpressionBuilder LeftExpression
        {
            get;
            set;
        }

        public ExpressionFramework.Abstractions.DomainModel.Domains.Operator Operator
        {
            get;
            set;
        }

        public ExpressionFramework.Abstractions.DomainModel.Builders.IExpressionBuilder RightExpression
        {
            get;
            set;
        }

        public ExpressionFramework.Abstractions.DomainModel.ICondition Build()
        {
            return new ExpressionFramework.Core.DomainModel.Condition(LeftExpression.Build(), Operator, RightExpression.Build());
        }

        public ConditionBuilder()
        {
            LeftExpression = new ExpressionFramework.Core.DomainModel.Builders.ExpressionBuilder();
            Operator = default;
            RightExpression = new ExpressionFramework.Core.DomainModel.Builders.ExpressionBuilder();
        }

        public ConditionBuilder(ExpressionFramework.Abstractions.DomainModel.ICondition source)
        {
            LeftExpression = new ExpressionFramework.Core.DomainModel.Builders.ExpressionBuilder(source.LeftExpression);
            Operator = source.Operator;
            RightExpression = new ExpressionFramework.Core.DomainModel.Builders.ExpressionBuilder(source.RightExpression);
        }
    }
#nullable restore

#nullable enable
    public partial class ConstantExpressionBuilder : ExpressionFramework.Abstractions.DomainModel.Builders.IConstantExpressionBuilder
    {
        public object? Value
        {
            get;
            set;
        }

        public ExpressionFramework.Abstractions.DomainModel.Builders.IExpressionFunctionBuilder? Function
        {
            get;
            set;
        }

        public ExpressionFramework.Abstractions.DomainModel.IConstantExpression Build()
        {
            return new ExpressionFramework.Core.DomainModel.ConstantExpression(Value, Function?.Build());
        }

        public ConstantExpressionBuilder()
        {
        }

        public ConstantExpressionBuilder(ExpressionFramework.Abstractions.DomainModel.IConstantExpression source)
        {
            Value = source.Value;
            Function = source.Function == null ? null : source.Function.ToBuilder();
        }
    }
#nullable restore

#nullable enable
    public partial class EmptyExpressionBuilder : ExpressionFramework.Abstractions.DomainModel.Builders.IEmptyExpressionBuilder
    {
        public ExpressionFramework.Abstractions.DomainModel.Builders.IExpressionFunctionBuilder? Function
        {
            get;
            set;
        }

        public ExpressionFramework.Abstractions.DomainModel.IEmptyExpression Build()
        {
            return new ExpressionFramework.Core.DomainModel.EmptyExpression(Function?.Build());
        }

        public EmptyExpressionBuilder()
        {
        }

        public EmptyExpressionBuilder(ExpressionFramework.Abstractions.DomainModel.IEmptyExpression source)
        {
            Function = source.Function == null ? null : source.Function.ToBuilder();
        }
    }
#nullable restore

#nullable enable
    public partial class ExpressionBuilder : ExpressionFramework.Abstractions.DomainModel.Builders.IExpressionBuilder
    {
        public ExpressionFramework.Abstractions.DomainModel.Builders.IExpressionFunctionBuilder? Function
        {
            get;
            set;
        }

        public ExpressionFramework.Abstractions.DomainModel.IExpression Build()
        {
            return new ExpressionFramework.Core.DomainModel.Expression(Function?.Build());
        }

        public ExpressionBuilder()
        {
        }

        public ExpressionBuilder(ExpressionFramework.Abstractions.DomainModel.IExpression source)
        {
            Function = source.Function == null ? null : source.Function.ToBuilder();
        }
    }
#nullable restore

#nullable enable
    public partial class FieldExpressionBuilder : ExpressionFramework.Abstractions.DomainModel.Builders.IFieldExpressionBuilder
    {
        public string FieldName
        {
            get;
            set;
        }

        public ExpressionFramework.Abstractions.DomainModel.Builders.IExpressionFunctionBuilder? Function
        {
            get;
            set;
        }

        public ExpressionFramework.Abstractions.DomainModel.IFieldExpression Build()
        {
            return new ExpressionFramework.Core.DomainModel.FieldExpression(FieldName, Function?.Build());
        }

        public FieldExpressionBuilder()
        {
            FieldName = string.Empty;
        }

        public FieldExpressionBuilder(ExpressionFramework.Abstractions.DomainModel.IFieldExpression source)
        {
            FieldName = source.FieldName;
            Function = source.Function == null ? null : source.Function.ToBuilder();
        }
    }
#nullable restore
}
